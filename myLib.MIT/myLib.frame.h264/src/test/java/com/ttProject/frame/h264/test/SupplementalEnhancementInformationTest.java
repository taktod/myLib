/*
 * myLib - https://github.com/taktod/myLib
 * Copyright (c) 2014 ttProject. All rights reserved.
 * 
 * Licensed under The MIT license.
 */
package com.ttProject.frame.h264.test;

import org.junit.Test;

import com.ttProject.nio.channels.ByteReadChannel;
import com.ttProject.nio.channels.IReadChannel;
import com.ttProject.unit.extra.BitLoader;
import com.ttProject.unit.extra.bit.Bit8;
import com.ttProject.util.HexUtil;

/**
 * h264のseiの読み込み動作テスト
 * これをいれて、ptsをきちんと調整するようにしておきたいねぇ・・・
 * @author taktod
 */
public class SupplementalEnhancementInformationTest {
	/**
	 * とりあえず読み込み動作テストを書いておきたい。
	 * @throws Exception
	 */
	@Test
	public void test() throws Exception {
		IReadChannel target = new ByteReadChannel(HexUtil.makeBuffer("06001180003E8480000003000003003E84800000030040010D00010000030090804D3DA90000030080"));
		BitLoader loader = new BitLoader(target);
		loader.setEmulationPreventionFlg(true);
		// 06001180003E8480000003000003003E84800000030040010D00010000030090804D3DA90000030080
		// 06001180003E848000000000003E848000000040010D000100000090804D3DA900000080 ← 00 00 03の03の部分撤去したらこうなる
		// こうなる
		// 001180003E848000000000003E848000000040 ← buffering_period
		// 010D000100000090804D3DA9000000 ← pic_timing
	}
	/**
	 * こっちもよみこみたいね。
	 * @throws Exception
	 */
	@Test
	public void test2() throws Exception {
		IReadChannel target = new ByteReadChannel(HexUtil.makeBuffer
		// 0605FFFF18DC45E9BDE6D948B7962CD820D923EEEF78323634202D20636F72652036372072313136324D20663762
		// [] seiのtypeデータ
		//   [] 内容のデータ 0x05なのでuser_data_unregistered
		//     [    ] 0xFF + 0xFF + 0x18 = 0x216 534byte(00 00 03を調整した後のデータでのサイズになります。)
		//           [                              ] uuid_iso_iec_11578 単なるID
		//                                           [以下データ内容
		BitLoader loader = new BitLoader(target);
		loader.setEmulationPreventionFlg(true);
		Bit8 b = new Bit8();
		loader.load(b);
/*
0: buffering_period
1: pic_timing
2: pan_scan_rect
3: filler_payload
4: user_data_registered_itu_t_t35
5: user_data_unregistered
6: recovery_point
7: dec_ref_pic_marking_repetition
8: spare_pic
9: scene_info

 */
	}
}
