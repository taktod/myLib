/*
 * myLib - https://github.com/taktod/myLib
 * Copyright (c) 2014 ttProject. All rights reserved.
 * 
 * Licensed under The MIT license.
 */
package com.ttProject.frame.aac;

import com.ttProject.frame.AudioFrame;
import com.ttProject.frame.CodecType;
import com.ttProject.frame.aac.type.Frame;
import com.ttProject.nio.channels.ByteReadChannel;
import com.ttProject.nio.channels.IReadChannel;
import com.ttProject.util.HexUtil;

/**
 * aacFrameの共通動作
 * @author taktod
 */
public abstract class AacFrame extends AudioFrame {
	/**
	 * 無音frameのサンプルを応答します。
	 * @param sampleRate サンプルレート
	 * @param channels チャンネル数
	 * @param bitSize aacには関係なし
	 * @return
	 */
	public static Frame getMutedFrame(int sampleRate, int channels, int bitSize) throws Exception {
		String bufferString = null;
		if(channels != 2 && channels != 1) {
			throw new RuntimeException("チャンネル設定が想定外でした。");
		}
		// bitrate指定によって内容がかわってくるっぽいですね。
		switch(sampleRate) {
		case 44100:
			if(channels == 2) {
//				bufferString
				bufferString = "FFF9508005FFFC21100520A41BC4800000000000000000000000000000000000000000000000000000000000000038";
			}
			else {
				bufferString = "FFF9504005DFFC01482006F13000000000000000000000000000000000000000000000000000000000000000000E";
			}
			break;
		case 22050:
			if(channels == 2) {
				bufferString = "FFF95C800BBFFC21100520A41BD000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038";
			}
			else {
				bufferString = "FFF95C400BBFFC01482006F420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000E";
			}
			break;
		case 11025:
			if(channels == 2) {
				bufferString = "FFF96880175FFC21416C5401020408A802040811BE540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000380";
			}
			else {
				bufferString = "FFF96840175FFC015082D808102046F9B00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000E";
			}
			break;
		default:
			throw new RuntimeException("想定外の値でした。");
		}
		IReadChannel channel = new ByteReadChannel(HexUtil.makeBuffer(bufferString));
		Frame frame = new Frame();
		frame.minimumLoad(channel);
		frame.load(channel);
		return frame;
	}
	/**
	 * {@inheritDoc}
	 */
	@Override
	public CodecType getCodecType() {
		return CodecType.AAC;
	}
}
